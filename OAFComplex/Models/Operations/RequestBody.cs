
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace OAFComplex.Models.Operations
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using OAFComplex.Models.Shared;
    using OAFComplex.Utils;
    using System.Collections.Generic;
    using System.Numerics;
    using System;
    

    public class RequestBodyType
    {
        private RequestBodyType(string value) { Value = value; }

        public string Value { get; private set; }
        public static RequestBodyType ArrayOfAtom { get { return new RequestBodyType("arrayOfAtom"); } }
        
        public static RequestBodyType Atom { get { return new RequestBodyType("Atom"); } }
        
        public static RequestBodyType Null { get { return new RequestBodyType("null"); } } 

        public override string ToString() { return Value; }
        public static implicit operator String(RequestBodyType v) { return v.Value; }
        public static RequestBodyType FromString(string v) {
            switch(v) {
                case "arrayOfAtom": return ArrayOfAtom;
                case "Atom": return Atom;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for RequestBodyType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((RequestBodyType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(RequestBody.RequestBodyConverter))]
    public class RequestBody {
        public RequestBody(RequestBodyType type) {
            Type = type;
        }
        public List<Atom>? ArrayOfAtom { get; set; } 
        public Atom? Atom { get; set; } 

        public RequestBodyType Type {get; set; }


        public static RequestBody CreateArrayOfAtom(List<Atom> arrayOfAtom) {
            RequestBodyType typ = RequestBodyType.ArrayOfAtom;

            RequestBody res = new RequestBody(typ);
            res.ArrayOfAtom = arrayOfAtom;
            return res;
        }

        public static RequestBody CreateAtom(Atom atom) {
            RequestBodyType typ = RequestBodyType.Atom;

            RequestBody res = new RequestBody(typ);
            res.Atom = atom;
            return res;
        }

        public static RequestBody CreateNull() {
            RequestBodyType typ = RequestBodyType.Null;
            return new RequestBody(typ);
        }

        public class RequestBodyConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(RequestBody);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    Atom? atom = JsonConvert.DeserializeObject<Atom>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(Atom), "string")});
                    return new RequestBody(RequestBodyType.Atom) {
                        Atom = atom
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    List<Atom>? arrayOfAtom = JsonConvert.DeserializeObject<List<Atom>>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(List<Atom>), "string")});
                    return new RequestBody(RequestBodyType.ArrayOfAtom) {
                        ArrayOfAtom = arrayOfAtom
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                RequestBody res = (RequestBody)value;
                if (RequestBodyType.FromString(res.Type).Equals(RequestBodyType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.ArrayOfAtom != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ArrayOfAtom));
                    return;
                }
                if (res.Atom != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Atom));
                    return;
                }

            }
        }

    }


}