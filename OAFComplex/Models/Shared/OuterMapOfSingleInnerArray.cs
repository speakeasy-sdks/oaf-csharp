
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace OAFComplex.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using OAFComplex.Models.Shared;
    using OAFComplex.Utils;
    using System.Collections.Generic;
    using System.Numerics;
    using System;
    

    public class OuterMapOfSingleInnerArrayType
    {
        private OuterMapOfSingleInnerArrayType(string value) { Value = value; }

        public string Value { get; private set; }
        public static OuterMapOfSingleInnerArrayType ArrayOfint32 { get { return new OuterMapOfSingleInnerArrayType("arrayOfint32"); } }
        
        public static OuterMapOfSingleInnerArrayType Orbit { get { return new OuterMapOfSingleInnerArrayType("Orbit"); } }
        
        public static OuterMapOfSingleInnerArrayType Null { get { return new OuterMapOfSingleInnerArrayType("null"); } } 

        public override string ToString() { return Value; }
        public static implicit operator String(OuterMapOfSingleInnerArrayType v) { return v.Value; }
        public static OuterMapOfSingleInnerArrayType FromString(string v) {
            switch(v) {
                case "arrayOfint32": return ArrayOfint32;
                case "Orbit": return Orbit;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for OuterMapOfSingleInnerArrayType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((OuterMapOfSingleInnerArrayType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(OuterMapOfSingleInnerArray.OuterMapOfSingleInnerArrayConverter))]
    public class OuterMapOfSingleInnerArray {
        public OuterMapOfSingleInnerArray(OuterMapOfSingleInnerArrayType type) {
            Type = type;
        }
        public List<int>? ArrayOfint32 { get; set; } 
        public Orbit? Orbit { get; set; } 

        public OuterMapOfSingleInnerArrayType Type {get; set; }


        public static OuterMapOfSingleInnerArray CreateArrayOfint32(List<int> arrayOfint32) {
            OuterMapOfSingleInnerArrayType typ = OuterMapOfSingleInnerArrayType.ArrayOfint32;

            OuterMapOfSingleInnerArray res = new OuterMapOfSingleInnerArray(typ);
            res.ArrayOfint32 = arrayOfint32;
            return res;
        }

        public static OuterMapOfSingleInnerArray CreateOrbit(Orbit orbit) {
            OuterMapOfSingleInnerArrayType typ = OuterMapOfSingleInnerArrayType.Orbit;

            OuterMapOfSingleInnerArray res = new OuterMapOfSingleInnerArray(typ);
            res.Orbit = orbit;
            return res;
        }

        public static OuterMapOfSingleInnerArray CreateNull() {
            OuterMapOfSingleInnerArrayType typ = OuterMapOfSingleInnerArrayType.Null;
            return new OuterMapOfSingleInnerArray(typ);
        }

        public class OuterMapOfSingleInnerArrayConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(OuterMapOfSingleInnerArray);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    Orbit? orbit = JsonConvert.DeserializeObject<Orbit>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(Orbit), "string")});
                    return new OuterMapOfSingleInnerArray(OuterMapOfSingleInnerArrayType.Orbit) {
                        Orbit = orbit
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    List<int>? arrayOfint32 = JsonConvert.DeserializeObject<List<int>>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(List<int>), "string")});
                    return new OuterMapOfSingleInnerArray(OuterMapOfSingleInnerArrayType.ArrayOfint32) {
                        ArrayOfint32 = arrayOfint32
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                OuterMapOfSingleInnerArray res = (OuterMapOfSingleInnerArray)value;
                if (OuterMapOfSingleInnerArrayType.FromString(res.Type).Equals(OuterMapOfSingleInnerArrayType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.ArrayOfint32 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ArrayOfint32));
                    return;
                }
                if (res.Orbit != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Orbit));
                    return;
                }

            }
        }

    }


}