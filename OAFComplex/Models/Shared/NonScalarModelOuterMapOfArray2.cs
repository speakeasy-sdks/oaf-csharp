
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace OAFComplex.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using OAFComplex.Models.Shared;
    using OAFComplex.Utils;
    using System.Collections.Generic;
    using System.Numerics;
    using System;
    

    public class NonScalarModelOuterMapOfArray2Type
    {
        private NonScalarModelOuterMapOfArray2Type(string value) { Value = value; }

        public string Value { get; private set; }
        public static NonScalarModelOuterMapOfArray2Type MapOfMorning { get { return new NonScalarModelOuterMapOfArray2Type("mapOfMorning"); } }
        
        public static NonScalarModelOuterMapOfArray2Type MapOfEvening { get { return new NonScalarModelOuterMapOfArray2Type("mapOfEvening"); } }
        
        public static NonScalarModelOuterMapOfArray2Type MapOfNoon { get { return new NonScalarModelOuterMapOfArray2Type("mapOfNoon"); } }
        
        public static NonScalarModelOuterMapOfArray2Type Any { get { return new NonScalarModelOuterMapOfArray2Type("any"); } }
        
        public static NonScalarModelOuterMapOfArray2Type Null { get { return new NonScalarModelOuterMapOfArray2Type("null"); } } 

        public override string ToString() { return Value; }
        public static implicit operator String(NonScalarModelOuterMapOfArray2Type v) { return v.Value; }
        public static NonScalarModelOuterMapOfArray2Type FromString(string v) {
            switch(v) {
                case "mapOfMorning": return MapOfMorning;
                case "mapOfEvening": return MapOfEvening;
                case "mapOfNoon": return MapOfNoon;
                case "any": return Any;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for NonScalarModelOuterMapOfArray2Type");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((NonScalarModelOuterMapOfArray2Type)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(NonScalarModelOuterMapOfArray2.NonScalarModelOuterMapOfArray2Converter))]
    public class NonScalarModelOuterMapOfArray2 {
        public NonScalarModelOuterMapOfArray2(NonScalarModelOuterMapOfArray2Type type) {
            Type = type;
        }
        public Dictionary<string, Morning>? MapOfMorning { get; set; } 
        public Dictionary<string, Evening>? MapOfEvening { get; set; } 
        public Dictionary<string, Noon>? MapOfNoon { get; set; } 
        public object? Any { get; set; } 

        public NonScalarModelOuterMapOfArray2Type Type {get; set; }


        public static NonScalarModelOuterMapOfArray2 CreateMapOfMorning(Dictionary<string, Morning> mapOfMorning) {
            NonScalarModelOuterMapOfArray2Type typ = NonScalarModelOuterMapOfArray2Type.MapOfMorning;

            NonScalarModelOuterMapOfArray2 res = new NonScalarModelOuterMapOfArray2(typ);
            res.MapOfMorning = mapOfMorning;
            return res;
        }

        public static NonScalarModelOuterMapOfArray2 CreateMapOfEvening(Dictionary<string, Evening> mapOfEvening) {
            NonScalarModelOuterMapOfArray2Type typ = NonScalarModelOuterMapOfArray2Type.MapOfEvening;

            NonScalarModelOuterMapOfArray2 res = new NonScalarModelOuterMapOfArray2(typ);
            res.MapOfEvening = mapOfEvening;
            return res;
        }

        public static NonScalarModelOuterMapOfArray2 CreateMapOfNoon(Dictionary<string, Noon> mapOfNoon) {
            NonScalarModelOuterMapOfArray2Type typ = NonScalarModelOuterMapOfArray2Type.MapOfNoon;

            NonScalarModelOuterMapOfArray2 res = new NonScalarModelOuterMapOfArray2(typ);
            res.MapOfNoon = mapOfNoon;
            return res;
        }

        public static NonScalarModelOuterMapOfArray2 CreateAny(object any) {
            NonScalarModelOuterMapOfArray2Type typ = NonScalarModelOuterMapOfArray2Type.Any;

            NonScalarModelOuterMapOfArray2 res = new NonScalarModelOuterMapOfArray2(typ);
            res.Any = any;
            return res;
        }

        public static NonScalarModelOuterMapOfArray2 CreateNull() {
            NonScalarModelOuterMapOfArray2Type typ = NonScalarModelOuterMapOfArray2Type.Null;
            return new NonScalarModelOuterMapOfArray2(typ);
        }

        public class NonScalarModelOuterMapOfArray2Converter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(NonScalarModelOuterMapOfArray2);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    Dictionary<string, Morning>? mapOfMorning = JsonConvert.DeserializeObject<Dictionary<string, Morning>>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(Dictionary<string, Morning>), "string")});
                    return new NonScalarModelOuterMapOfArray2(NonScalarModelOuterMapOfArray2Type.MapOfMorning) {
                        MapOfMorning = mapOfMorning
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    Dictionary<string, Evening>? mapOfEvening = JsonConvert.DeserializeObject<Dictionary<string, Evening>>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(Dictionary<string, Evening>), "string")});
                    return new NonScalarModelOuterMapOfArray2(NonScalarModelOuterMapOfArray2Type.MapOfEvening) {
                        MapOfEvening = mapOfEvening
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    Dictionary<string, Noon>? mapOfNoon = JsonConvert.DeserializeObject<Dictionary<string, Noon>>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(Dictionary<string, Noon>), "string")});
                    return new NonScalarModelOuterMapOfArray2(NonScalarModelOuterMapOfArray2Type.MapOfNoon) {
                        MapOfNoon = mapOfNoon
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    object? any = JsonConvert.DeserializeObject<object>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(object), "string")});
                    return new NonScalarModelOuterMapOfArray2(NonScalarModelOuterMapOfArray2Type.Any) {
                        Any = any
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                NonScalarModelOuterMapOfArray2 res = (NonScalarModelOuterMapOfArray2)value;
                if (NonScalarModelOuterMapOfArray2Type.FromString(res.Type).Equals(NonScalarModelOuterMapOfArray2Type.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.MapOfMorning != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.MapOfMorning));
                    return;
                }
                if (res.MapOfEvening != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.MapOfEvening));
                    return;
                }
                if (res.MapOfNoon != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.MapOfNoon));
                    return;
                }
                if (res.Any != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Any));
                    return;
                }

            }
        }

    }


}