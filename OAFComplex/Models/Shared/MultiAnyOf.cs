
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace OAFComplex.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using OAFComplex.Models.Shared;
    using OAFComplex.Utils;
    using System.Numerics;
    using System;
    

    public class MultiAnyOfType
    {
        private MultiAnyOfType(string value) { Value = value; }

        public string Value { get; private set; }
        public static MultiAnyOfType One { get { return new MultiAnyOfType("1"); } }
        
        public static MultiAnyOfType Morning { get { return new MultiAnyOfType("Morning"); } }
        
        public static MultiAnyOfType Null { get { return new MultiAnyOfType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(MultiAnyOfType v) { return v.Value; }
        public static MultiAnyOfType FromString(string v) {
            switch(v) {
                case "1": return One;
                case "Morning": return Morning;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for MultiAnyOfType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((MultiAnyOfType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(MultiAnyOf.MultiAnyOfConverter))]
    public class MultiAnyOf {
        public MultiAnyOf(MultiAnyOfType type) {
            Type = type;
        }
        public One? One { get; set; } 
        public Morning? Morning { get; set; } 

        public MultiAnyOfType Type { get; set; }


        public static MultiAnyOf CreateOne(One one) {
            MultiAnyOfType typ = MultiAnyOfType.One;

            MultiAnyOf res = new MultiAnyOf(typ);
            res.One = one;
            return res;
        }

        public static MultiAnyOf CreateMorning(Morning morning) {
            MultiAnyOfType typ = MultiAnyOfType.Morning;

            MultiAnyOf res = new MultiAnyOf(typ);
            res.Morning = morning;
            return res;
        }

        public static MultiAnyOf CreateNull() {
            MultiAnyOfType typ = MultiAnyOfType.Null;
            return new MultiAnyOf(typ);
        }

        public class MultiAnyOfConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(MultiAnyOf);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    Morning? morning = ResponseBodyDeserializer.Deserialize<Morning>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new MultiAnyOf(MultiAnyOfType.Morning) {
                        Morning = morning
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    One? one = ResponseBodyDeserializer.Deserialize<One>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new MultiAnyOf(MultiAnyOfType.One) {
                        One = one
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                MultiAnyOf res = (MultiAnyOf)value;
                if (MultiAnyOfType.FromString(res.Type).Equals(MultiAnyOfType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.One != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.One));
                    return;
                }
                if (res.Morning != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Morning));
                    return;
                }

            }
        }

    }

}