
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace OAFComplex.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using OAFComplex.Utils;
    using System.Collections.Generic;
    using System.Numerics;
    using System;
    

    public class ScalarModelSingleInnerMapOfArrayType
    {
        private ScalarModelSingleInnerMapOfArrayType(string value) { Value = value; }

        public string Value { get; private set; }
        public static ScalarModelSingleInnerMapOfArrayType MapOfarrayOfnumber { get { return new ScalarModelSingleInnerMapOfArrayType("mapOfarrayOfnumber"); } }
        
        public static ScalarModelSingleInnerMapOfArrayType MapOfnumber { get { return new ScalarModelSingleInnerMapOfArrayType("mapOfnumber"); } }
        
        public static ScalarModelSingleInnerMapOfArrayType Null { get { return new ScalarModelSingleInnerMapOfArrayType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(ScalarModelSingleInnerMapOfArrayType v) { return v.Value; }
        public static ScalarModelSingleInnerMapOfArrayType FromString(string v) {
            switch(v) {
                case "mapOfarrayOfnumber": return MapOfarrayOfnumber;
                case "mapOfnumber": return MapOfnumber;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for ScalarModelSingleInnerMapOfArrayType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ScalarModelSingleInnerMapOfArrayType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(ScalarModelSingleInnerMapOfArray.ScalarModelSingleInnerMapOfArrayConverter))]
    public class ScalarModelSingleInnerMapOfArray {
        public ScalarModelSingleInnerMapOfArray(ScalarModelSingleInnerMapOfArrayType type) {
            Type = type;
        }
        public Dictionary<string, List<double>>? MapOfarrayOfnumber { get; set; } 
        public Dictionary<string, double>? MapOfnumber { get; set; } 

        public ScalarModelSingleInnerMapOfArrayType Type { get; set; }


        public static ScalarModelSingleInnerMapOfArray CreateMapOfarrayOfnumber(Dictionary<string, List<double>> mapOfarrayOfnumber) {
            ScalarModelSingleInnerMapOfArrayType typ = ScalarModelSingleInnerMapOfArrayType.MapOfarrayOfnumber;

            ScalarModelSingleInnerMapOfArray res = new ScalarModelSingleInnerMapOfArray(typ);
            res.MapOfarrayOfnumber = mapOfarrayOfnumber;
            return res;
        }

        public static ScalarModelSingleInnerMapOfArray CreateMapOfnumber(Dictionary<string, double> mapOfnumber) {
            ScalarModelSingleInnerMapOfArrayType typ = ScalarModelSingleInnerMapOfArrayType.MapOfnumber;

            ScalarModelSingleInnerMapOfArray res = new ScalarModelSingleInnerMapOfArray(typ);
            res.MapOfnumber = mapOfnumber;
            return res;
        }

        public static ScalarModelSingleInnerMapOfArray CreateNull() {
            ScalarModelSingleInnerMapOfArrayType typ = ScalarModelSingleInnerMapOfArrayType.Null;
            return new ScalarModelSingleInnerMapOfArray(typ);
        }

        public class ScalarModelSingleInnerMapOfArrayConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(ScalarModelSingleInnerMapOfArray);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    Dictionary<string, List<double>>? mapOfarrayOfnumber = JsonConvert.DeserializeObject<Dictionary<string, List<double>>>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(Dictionary<string, List<double>>))});
                    return new ScalarModelSingleInnerMapOfArray(ScalarModelSingleInnerMapOfArrayType.MapOfarrayOfnumber) {
                        MapOfarrayOfnumber = mapOfarrayOfnumber
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    Dictionary<string, double>? mapOfnumber = JsonConvert.DeserializeObject<Dictionary<string, double>>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(Dictionary<string, double>))});
                    return new ScalarModelSingleInnerMapOfArray(ScalarModelSingleInnerMapOfArrayType.MapOfnumber) {
                        MapOfnumber = mapOfnumber
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                ScalarModelSingleInnerMapOfArray res = (ScalarModelSingleInnerMapOfArray)value;
                if (ScalarModelSingleInnerMapOfArrayType.FromString(res.Type).Equals(ScalarModelSingleInnerMapOfArrayType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.MapOfarrayOfnumber != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.MapOfarrayOfnumber));
                    return;
                }
                if (res.MapOfnumber != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.MapOfnumber));
                    return;
                }

            }
        }

    }

}