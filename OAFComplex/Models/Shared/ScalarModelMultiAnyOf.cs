
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace OAFComplex.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using OAFComplex.Utils;
    using System.Numerics;
    using System;
    

    public class ScalarModelMultiAnyOfType
    {
        private ScalarModelMultiAnyOfType(string value) { Value = value; }

        public string Value { get; private set; }
        public static ScalarModelMultiAnyOfType ScalarModel1 { get { return new ScalarModelMultiAnyOfType("ScalarModel_1"); } }
        
        public static ScalarModelMultiAnyOfType Int32 { get { return new ScalarModelMultiAnyOfType("int32"); } }
        
        public static ScalarModelMultiAnyOfType Null { get { return new ScalarModelMultiAnyOfType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(ScalarModelMultiAnyOfType v) { return v.Value; }
        public static ScalarModelMultiAnyOfType FromString(string v) {
            switch(v) {
                case "ScalarModel_1": return ScalarModel1;
                case "int32": return Int32;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for ScalarModelMultiAnyOfType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ScalarModelMultiAnyOfType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(ScalarModelMultiAnyOf.ScalarModelMultiAnyOfConverter))]
    public class ScalarModelMultiAnyOf {
        public ScalarModelMultiAnyOf(ScalarModelMultiAnyOfType type) {
            Type = type;
        }
        public ScalarModel1? ScalarModel1 { get; set; } 
        public int? Int32 { get; set; } 

        public ScalarModelMultiAnyOfType Type { get; set; }


        public static ScalarModelMultiAnyOf CreateScalarModel1(ScalarModel1 scalarModel1) {
            ScalarModelMultiAnyOfType typ = ScalarModelMultiAnyOfType.ScalarModel1;

            ScalarModelMultiAnyOf res = new ScalarModelMultiAnyOf(typ);
            res.ScalarModel1 = scalarModel1;
            return res;
        }

        public static ScalarModelMultiAnyOf CreateInt32(int int32) {
            ScalarModelMultiAnyOfType typ = ScalarModelMultiAnyOfType.Int32;

            ScalarModelMultiAnyOf res = new ScalarModelMultiAnyOf(typ);
            res.Int32 = int32;
            return res;
        }

        public static ScalarModelMultiAnyOf CreateNull() {
            ScalarModelMultiAnyOfType typ = ScalarModelMultiAnyOfType.Null;
            return new ScalarModelMultiAnyOf(typ);
        }

        public class ScalarModelMultiAnyOfConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(ScalarModelMultiAnyOf);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    ScalarModel1? scalarModel1 = ResponseBodyDeserializer.Deserialize<ScalarModel1>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new ScalarModelMultiAnyOf(ScalarModelMultiAnyOfType.ScalarModel1) {
                        ScalarModel1 = scalarModel1
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                } 
                try {
                    var converted = Convert.ToInt32(json);
                    return new ScalarModelMultiAnyOf(ScalarModelMultiAnyOfType.Int32) {
                        Int32 = converted
                    };
                } catch (System.FormatException) {
                    // try next option
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                ScalarModelMultiAnyOf res = (ScalarModelMultiAnyOf)value;
                if (ScalarModelMultiAnyOfType.FromString(res.Type).Equals(ScalarModelMultiAnyOfType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.ScalarModel1 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ScalarModel1));
                    return;
                }
                if (res.Int32 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Int32));
                    return;
                }

            }
        }

    }

}