
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace OAFComplex.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using OAFComplex.Utils;
    using System.Collections.Generic;
    using System.Numerics;
    using System;
    

    public class ScalarModelAllInnerArrayOfMapType
    {
        private ScalarModelAllInnerArrayOfMapType(string value) { Value = value; }

        public string Value { get; private set; }
        public static ScalarModelAllInnerArrayOfMapType ArrayOfmapOfint32 { get { return new ScalarModelAllInnerArrayOfMapType("arrayOfmapOfint32"); } }
        
        public static ScalarModelAllInnerArrayOfMapType ArrayOfmapOfstr { get { return new ScalarModelAllInnerArrayOfMapType("arrayOfmapOfstr"); } }
        
        public static ScalarModelAllInnerArrayOfMapType Any { get { return new ScalarModelAllInnerArrayOfMapType("any"); } }
        
        public static ScalarModelAllInnerArrayOfMapType Null { get { return new ScalarModelAllInnerArrayOfMapType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(ScalarModelAllInnerArrayOfMapType v) { return v.Value; }
        public static ScalarModelAllInnerArrayOfMapType FromString(string v) {
            switch(v) {
                case "arrayOfmapOfint32": return ArrayOfmapOfint32;
                case "arrayOfmapOfstr": return ArrayOfmapOfstr;
                case "any": return Any;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for ScalarModelAllInnerArrayOfMapType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ScalarModelAllInnerArrayOfMapType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(ScalarModelAllInnerArrayOfMap.ScalarModelAllInnerArrayOfMapConverter))]
    public class ScalarModelAllInnerArrayOfMap {
        public ScalarModelAllInnerArrayOfMap(ScalarModelAllInnerArrayOfMapType type) {
            Type = type;
        }
        public List<Dictionary<string, int>>? ArrayOfmapOfint32 { get; set; } 
        public List<Dictionary<string, string>>? ArrayOfmapOfstr { get; set; } 
        public object? Any { get; set; } 

        public ScalarModelAllInnerArrayOfMapType Type { get; set; }


        public static ScalarModelAllInnerArrayOfMap CreateArrayOfmapOfint32(List<Dictionary<string, int>> arrayOfmapOfint32) {
            ScalarModelAllInnerArrayOfMapType typ = ScalarModelAllInnerArrayOfMapType.ArrayOfmapOfint32;

            ScalarModelAllInnerArrayOfMap res = new ScalarModelAllInnerArrayOfMap(typ);
            res.ArrayOfmapOfint32 = arrayOfmapOfint32;
            return res;
        }

        public static ScalarModelAllInnerArrayOfMap CreateArrayOfmapOfstr(List<Dictionary<string, string>> arrayOfmapOfstr) {
            ScalarModelAllInnerArrayOfMapType typ = ScalarModelAllInnerArrayOfMapType.ArrayOfmapOfstr;

            ScalarModelAllInnerArrayOfMap res = new ScalarModelAllInnerArrayOfMap(typ);
            res.ArrayOfmapOfstr = arrayOfmapOfstr;
            return res;
        }

        public static ScalarModelAllInnerArrayOfMap CreateAny(object any) {
            ScalarModelAllInnerArrayOfMapType typ = ScalarModelAllInnerArrayOfMapType.Any;

            ScalarModelAllInnerArrayOfMap res = new ScalarModelAllInnerArrayOfMap(typ);
            res.Any = any;
            return res;
        }

        public static ScalarModelAllInnerArrayOfMap CreateNull() {
            ScalarModelAllInnerArrayOfMapType typ = ScalarModelAllInnerArrayOfMapType.Null;
            return new ScalarModelAllInnerArrayOfMap(typ);
        }

        public class ScalarModelAllInnerArrayOfMapConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(ScalarModelAllInnerArrayOfMap);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    List<Dictionary<string, int>>? arrayOfmapOfint32 = JsonConvert.DeserializeObject<List<Dictionary<string, int>>>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(List<Dictionary<string, int>>))});
                    return new ScalarModelAllInnerArrayOfMap(ScalarModelAllInnerArrayOfMapType.ArrayOfmapOfint32) {
                        ArrayOfmapOfint32 = arrayOfmapOfint32
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    List<Dictionary<string, string>>? arrayOfmapOfstr = JsonConvert.DeserializeObject<List<Dictionary<string, string>>>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(List<Dictionary<string, string>>))});
                    return new ScalarModelAllInnerArrayOfMap(ScalarModelAllInnerArrayOfMapType.ArrayOfmapOfstr) {
                        ArrayOfmapOfstr = arrayOfmapOfstr
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    object? any = JsonConvert.DeserializeObject<object>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(object))});
                    return new ScalarModelAllInnerArrayOfMap(ScalarModelAllInnerArrayOfMapType.Any) {
                        Any = any
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                ScalarModelAllInnerArrayOfMap res = (ScalarModelAllInnerArrayOfMap)value;
                if (ScalarModelAllInnerArrayOfMapType.FromString(res.Type).Equals(ScalarModelAllInnerArrayOfMapType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.ArrayOfmapOfint32 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ArrayOfmapOfint32));
                    return;
                }
                if (res.ArrayOfmapOfstr != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ArrayOfmapOfstr));
                    return;
                }
                if (res.Any != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Any));
                    return;
                }

            }
        }

    }

}