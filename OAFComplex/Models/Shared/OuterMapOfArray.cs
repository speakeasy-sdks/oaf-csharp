
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace OAFComplex.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using OAFComplex.Models.Shared;
    using OAFComplex.Utils;
    using System.Numerics;
    using System;
    

    public class OuterMapOfArrayType
    {
        private OuterMapOfArrayType(string value) { Value = value; }

        public string Value { get; private set; }
        public static OuterMapOfArrayType Postman { get { return new OuterMapOfArrayType("Postman"); } }
        
        public static OuterMapOfArrayType Person { get { return new OuterMapOfArrayType("Person"); } }
        
        public static OuterMapOfArrayType Number { get { return new OuterMapOfArrayType("number"); } }
        
        public static OuterMapOfArrayType Any { get { return new OuterMapOfArrayType("any"); } }
        
        public static OuterMapOfArrayType Null { get { return new OuterMapOfArrayType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(OuterMapOfArrayType v) { return v.Value; }
        public static OuterMapOfArrayType FromString(string v) {
            switch(v) {
                case "Postman": return Postman;
                case "Person": return Person;
                case "number": return Number;
                case "any": return Any;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for OuterMapOfArrayType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((OuterMapOfArrayType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(OuterMapOfArray.OuterMapOfArrayConverter))]
    public class OuterMapOfArray {
        public OuterMapOfArray(OuterMapOfArrayType type) {
            Type = type;
        }
        public Postman? Postman { get; set; } 
        public Person? Person { get; set; } 
        public double? Number { get; set; } 
        public object? Any { get; set; } 

        public OuterMapOfArrayType Type { get; set; }


        public static OuterMapOfArray CreatePostman(Postman postman) {
            OuterMapOfArrayType typ = OuterMapOfArrayType.Postman;

            OuterMapOfArray res = new OuterMapOfArray(typ);
            res.Postman = postman;
            return res;
        }

        public static OuterMapOfArray CreatePerson(Person person) {
            OuterMapOfArrayType typ = OuterMapOfArrayType.Person;

            OuterMapOfArray res = new OuterMapOfArray(typ);
            res.Person = person;
            return res;
        }

        public static OuterMapOfArray CreateNumber(double number) {
            OuterMapOfArrayType typ = OuterMapOfArrayType.Number;

            OuterMapOfArray res = new OuterMapOfArray(typ);
            res.Number = number;
            return res;
        }

        public static OuterMapOfArray CreateAny(object any) {
            OuterMapOfArrayType typ = OuterMapOfArrayType.Any;

            OuterMapOfArray res = new OuterMapOfArray(typ);
            res.Any = any;
            return res;
        }

        public static OuterMapOfArray CreateNull() {
            OuterMapOfArrayType typ = OuterMapOfArrayType.Null;
            return new OuterMapOfArray(typ);
        }

        public class OuterMapOfArrayConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(OuterMapOfArray);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    Person? person = ResponseBodyDeserializer.Deserialize<Person>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new OuterMapOfArray(OuterMapOfArrayType.Person) {
                        Person = person
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    Postman? postman = ResponseBodyDeserializer.Deserialize<Postman>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new OuterMapOfArray(OuterMapOfArrayType.Postman) {
                        Postman = postman
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                } 
                try {
                    var converted = Convert.ToDouble(json);
                    return new OuterMapOfArray(OuterMapOfArrayType.Number) {
                        Number = converted
                    };
                } catch (System.FormatException) {
                    // try next option
                }
                try
                {
                    object? any = ResponseBodyDeserializer.Deserialize<object>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new OuterMapOfArray(OuterMapOfArrayType.Any) {
                        Any = any
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                OuterMapOfArray res = (OuterMapOfArray)value;
                if (OuterMapOfArrayType.FromString(res.Type).Equals(OuterMapOfArrayType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Postman != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Postman));
                    return;
                }
                if (res.Person != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Person));
                    return;
                }
                if (res.Number != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Number));
                    return;
                }
                if (res.Any != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Any));
                    return;
                }

            }
        }

    }

}