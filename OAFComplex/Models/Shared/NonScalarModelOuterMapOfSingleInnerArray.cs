
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace OAFComplex.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using OAFComplex.Models.Shared;
    using OAFComplex.Utils;
    using System.Collections.Generic;
    using System.Numerics;
    using System;
    

    public class NonScalarModelOuterMapOfSingleInnerArrayType
    {
        private NonScalarModelOuterMapOfSingleInnerArrayType(string value) { Value = value; }

        public string Value { get; private set; }
        public static NonScalarModelOuterMapOfSingleInnerArrayType ArrayOfAtom { get { return new NonScalarModelOuterMapOfSingleInnerArrayType("arrayOfAtom"); } }
        
        public static NonScalarModelOuterMapOfSingleInnerArrayType Atom { get { return new NonScalarModelOuterMapOfSingleInnerArrayType("Atom"); } }
        
        public static NonScalarModelOuterMapOfSingleInnerArrayType Null { get { return new NonScalarModelOuterMapOfSingleInnerArrayType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(NonScalarModelOuterMapOfSingleInnerArrayType v) { return v.Value; }
        public static NonScalarModelOuterMapOfSingleInnerArrayType FromString(string v) {
            switch(v) {
                case "arrayOfAtom": return ArrayOfAtom;
                case "Atom": return Atom;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for NonScalarModelOuterMapOfSingleInnerArrayType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((NonScalarModelOuterMapOfSingleInnerArrayType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(NonScalarModelOuterMapOfSingleInnerArray.NonScalarModelOuterMapOfSingleInnerArrayConverter))]
    public class NonScalarModelOuterMapOfSingleInnerArray {
        public NonScalarModelOuterMapOfSingleInnerArray(NonScalarModelOuterMapOfSingleInnerArrayType type) {
            Type = type;
        }
        public List<Atom>? ArrayOfAtom { get; set; } 
        public Atom? Atom { get; set; } 

        public NonScalarModelOuterMapOfSingleInnerArrayType Type { get; set; }


        public static NonScalarModelOuterMapOfSingleInnerArray CreateArrayOfAtom(List<Atom> arrayOfAtom) {
            NonScalarModelOuterMapOfSingleInnerArrayType typ = NonScalarModelOuterMapOfSingleInnerArrayType.ArrayOfAtom;

            NonScalarModelOuterMapOfSingleInnerArray res = new NonScalarModelOuterMapOfSingleInnerArray(typ);
            res.ArrayOfAtom = arrayOfAtom;
            return res;
        }

        public static NonScalarModelOuterMapOfSingleInnerArray CreateAtom(Atom atom) {
            NonScalarModelOuterMapOfSingleInnerArrayType typ = NonScalarModelOuterMapOfSingleInnerArrayType.Atom;

            NonScalarModelOuterMapOfSingleInnerArray res = new NonScalarModelOuterMapOfSingleInnerArray(typ);
            res.Atom = atom;
            return res;
        }

        public static NonScalarModelOuterMapOfSingleInnerArray CreateNull() {
            NonScalarModelOuterMapOfSingleInnerArrayType typ = NonScalarModelOuterMapOfSingleInnerArrayType.Null;
            return new NonScalarModelOuterMapOfSingleInnerArray(typ);
        }

        public class NonScalarModelOuterMapOfSingleInnerArrayConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(NonScalarModelOuterMapOfSingleInnerArray);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    Atom? atom = ResponseBodyDeserializer.Deserialize<Atom>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new NonScalarModelOuterMapOfSingleInnerArray(NonScalarModelOuterMapOfSingleInnerArrayType.Atom) {
                        Atom = atom
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    List<Atom>? arrayOfAtom = ResponseBodyDeserializer.Deserialize<List<Atom>>(json, missingMemberHandling: MissingMemberHandling.Error);
                    return new NonScalarModelOuterMapOfSingleInnerArray(NonScalarModelOuterMapOfSingleInnerArrayType.ArrayOfAtom) {
                        ArrayOfAtom = arrayOfAtom
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                NonScalarModelOuterMapOfSingleInnerArray res = (NonScalarModelOuterMapOfSingleInnerArray)value;
                if (NonScalarModelOuterMapOfSingleInnerArrayType.FromString(res.Type).Equals(NonScalarModelOuterMapOfSingleInnerArrayType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.ArrayOfAtom != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ArrayOfAtom));
                    return;
                }
                if (res.Atom != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Atom));
                    return;
                }

            }
        }

    }

}