
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace OAFComplex.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using OAFComplex.Models.Shared;
    using OAFComplex.Utils;
    using System.Numerics;
    using System;
    

    public class NonScalarModelOuterMapOfArrayType
    {
        private NonScalarModelOuterMapOfArrayType(string value) { Value = value; }

        public string Value { get; private set; }
        public static NonScalarModelOuterMapOfArrayType Morning { get { return new NonScalarModelOuterMapOfArrayType("Morning"); } }
        
        public static NonScalarModelOuterMapOfArrayType Evening { get { return new NonScalarModelOuterMapOfArrayType("Evening"); } }
        
        public static NonScalarModelOuterMapOfArrayType Noon { get { return new NonScalarModelOuterMapOfArrayType("Noon"); } }
        
        public static NonScalarModelOuterMapOfArrayType Any { get { return new NonScalarModelOuterMapOfArrayType("any"); } }
        
        public static NonScalarModelOuterMapOfArrayType Null { get { return new NonScalarModelOuterMapOfArrayType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(NonScalarModelOuterMapOfArrayType v) { return v.Value; }
        public static NonScalarModelOuterMapOfArrayType FromString(string v) {
            switch(v) {
                case "Morning": return Morning;
                case "Evening": return Evening;
                case "Noon": return Noon;
                case "any": return Any;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for NonScalarModelOuterMapOfArrayType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((NonScalarModelOuterMapOfArrayType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(NonScalarModelOuterMapOfArray.NonScalarModelOuterMapOfArrayConverter))]
    public class NonScalarModelOuterMapOfArray {
        public NonScalarModelOuterMapOfArray(NonScalarModelOuterMapOfArrayType type) {
            Type = type;
        }
        public Morning? Morning { get; set; } 
        public Evening? Evening { get; set; } 
        public Noon? Noon { get; set; } 
        public object? Any { get; set; } 

        public NonScalarModelOuterMapOfArrayType Type { get; set; }


        public static NonScalarModelOuterMapOfArray CreateMorning(Morning morning) {
            NonScalarModelOuterMapOfArrayType typ = NonScalarModelOuterMapOfArrayType.Morning;

            NonScalarModelOuterMapOfArray res = new NonScalarModelOuterMapOfArray(typ);
            res.Morning = morning;
            return res;
        }

        public static NonScalarModelOuterMapOfArray CreateEvening(Evening evening) {
            NonScalarModelOuterMapOfArrayType typ = NonScalarModelOuterMapOfArrayType.Evening;

            NonScalarModelOuterMapOfArray res = new NonScalarModelOuterMapOfArray(typ);
            res.Evening = evening;
            return res;
        }

        public static NonScalarModelOuterMapOfArray CreateNoon(Noon noon) {
            NonScalarModelOuterMapOfArrayType typ = NonScalarModelOuterMapOfArrayType.Noon;

            NonScalarModelOuterMapOfArray res = new NonScalarModelOuterMapOfArray(typ);
            res.Noon = noon;
            return res;
        }

        public static NonScalarModelOuterMapOfArray CreateAny(object any) {
            NonScalarModelOuterMapOfArrayType typ = NonScalarModelOuterMapOfArrayType.Any;

            NonScalarModelOuterMapOfArray res = new NonScalarModelOuterMapOfArray(typ);
            res.Any = any;
            return res;
        }

        public static NonScalarModelOuterMapOfArray CreateNull() {
            NonScalarModelOuterMapOfArrayType typ = NonScalarModelOuterMapOfArrayType.Null;
            return new NonScalarModelOuterMapOfArray(typ);
        }

        public class NonScalarModelOuterMapOfArrayConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(NonScalarModelOuterMapOfArray);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    Morning? morning = JsonConvert.DeserializeObject<Morning>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(Morning))});
                    return new NonScalarModelOuterMapOfArray(NonScalarModelOuterMapOfArrayType.Morning) {
                        Morning = morning
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    Evening? evening = JsonConvert.DeserializeObject<Evening>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(Evening))});
                    return new NonScalarModelOuterMapOfArray(NonScalarModelOuterMapOfArrayType.Evening) {
                        Evening = evening
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    Noon? noon = JsonConvert.DeserializeObject<Noon>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(Noon))});
                    return new NonScalarModelOuterMapOfArray(NonScalarModelOuterMapOfArrayType.Noon) {
                        Noon = noon
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    object? any = JsonConvert.DeserializeObject<object>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(object))});
                    return new NonScalarModelOuterMapOfArray(NonScalarModelOuterMapOfArrayType.Any) {
                        Any = any
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                NonScalarModelOuterMapOfArray res = (NonScalarModelOuterMapOfArray)value;
                if (NonScalarModelOuterMapOfArrayType.FromString(res.Type).Equals(NonScalarModelOuterMapOfArrayType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Morning != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Morning));
                    return;
                }
                if (res.Evening != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Evening));
                    return;
                }
                if (res.Noon != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Noon));
                    return;
                }
                if (res.Any != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Any));
                    return;
                }

            }
        }

    }

}