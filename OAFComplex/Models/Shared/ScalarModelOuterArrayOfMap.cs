
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace OAFComplex.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using OAFComplex.Utils;
    using System.Numerics;
    using System;
    

    public class ScalarModelOuterArrayOfMapType
    {
        private ScalarModelOuterArrayOfMapType(string value) { Value = value; }

        public string Value { get; private set; }
        public static ScalarModelOuterArrayOfMapType Int32 { get { return new ScalarModelOuterArrayOfMapType("int32"); } }
        
        public static ScalarModelOuterArrayOfMapType Boolean { get { return new ScalarModelOuterArrayOfMapType("boolean"); } }
        
        public static ScalarModelOuterArrayOfMapType Str { get { return new ScalarModelOuterArrayOfMapType("str"); } }
        
        public static ScalarModelOuterArrayOfMapType Null { get { return new ScalarModelOuterArrayOfMapType("null"); } } 

        public override string ToString() { return Value; }
        public static implicit operator String(ScalarModelOuterArrayOfMapType v) { return v.Value; }
        public static ScalarModelOuterArrayOfMapType FromString(string v) {
            switch(v) {
                case "int32": return Int32;
                case "boolean": return Boolean;
                case "str": return Str;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for ScalarModelOuterArrayOfMapType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ScalarModelOuterArrayOfMapType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(ScalarModelOuterArrayOfMap.ScalarModelOuterArrayOfMapConverter))]
    public class ScalarModelOuterArrayOfMap {
        public ScalarModelOuterArrayOfMap(ScalarModelOuterArrayOfMapType type) {
            Type = type;
        }
        public int? Int32 { get; set; } 
        public bool? Boolean { get; set; } 
        public string? Str { get; set; } 

        public ScalarModelOuterArrayOfMapType Type {get; set; }


        public static ScalarModelOuterArrayOfMap CreateInt32(int int32) {
            ScalarModelOuterArrayOfMapType typ = ScalarModelOuterArrayOfMapType.Int32;

            ScalarModelOuterArrayOfMap res = new ScalarModelOuterArrayOfMap(typ);
            res.Int32 = int32;
            return res;
        }

        public static ScalarModelOuterArrayOfMap CreateBoolean(bool boolean) {
            ScalarModelOuterArrayOfMapType typ = ScalarModelOuterArrayOfMapType.Boolean;

            ScalarModelOuterArrayOfMap res = new ScalarModelOuterArrayOfMap(typ);
            res.Boolean = boolean;
            return res;
        }

        public static ScalarModelOuterArrayOfMap CreateStr(string str) {
            ScalarModelOuterArrayOfMapType typ = ScalarModelOuterArrayOfMapType.Str;

            ScalarModelOuterArrayOfMap res = new ScalarModelOuterArrayOfMap(typ);
            res.Str = str;
            return res;
        }

        public static ScalarModelOuterArrayOfMap CreateNull() {
            ScalarModelOuterArrayOfMapType typ = ScalarModelOuterArrayOfMapType.Null;
            return new ScalarModelOuterArrayOfMap(typ);
        }

        public class ScalarModelOuterArrayOfMapConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(ScalarModelOuterArrayOfMap);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                } 
                try {
                    var converted = Convert.ToInt32(json);
                    return new ScalarModelOuterArrayOfMap(ScalarModelOuterArrayOfMapType.Int32) {
                        Int32 = converted
                    };
                } catch (System.FormatException) {
                    // try next option
                } 
                try {
                    var converted = Convert.ToBoolean(json);
                    return new ScalarModelOuterArrayOfMap(ScalarModelOuterArrayOfMapType.Boolean) {
                        Boolean = converted
                    };
                } catch (System.FormatException) {
                    // try next option
                }
                if (json[0] == '"' && json[^1] == '"'){
                    return new ScalarModelOuterArrayOfMap(ScalarModelOuterArrayOfMapType.Str) {
                        Str = json[1..^1]
                    };
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                ScalarModelOuterArrayOfMap res = (ScalarModelOuterArrayOfMap)value;
                if (ScalarModelOuterArrayOfMapType.FromString(res.Type).Equals(ScalarModelOuterArrayOfMapType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Int32 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Int32));
                    return;
                }
                if (res.Boolean != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Boolean));
                    return;
                }
                if (res.Str != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Str));
                    return;
                }

            }
        }

    }


}