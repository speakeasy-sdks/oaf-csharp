
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace OAFComplex.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using OAFComplex.Utils;
    using System.Numerics;
    using System;
    

    public class ScalarModel1Type
    {
        private ScalarModel1Type(string value) { Value = value; }

        public string Value { get; private set; }
        public static ScalarModel1Type Number { get { return new ScalarModel1Type("number"); } }
        
        public static ScalarModel1Type Str { get { return new ScalarModel1Type("str"); } }
        
        public static ScalarModel1Type Null { get { return new ScalarModel1Type("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(ScalarModel1Type v) { return v.Value; }
        public static ScalarModel1Type FromString(string v) {
            switch(v) {
                case "number": return Number;
                case "str": return Str;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for ScalarModel1Type");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ScalarModel1Type)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(ScalarModel1.ScalarModel1Converter))]
    public class ScalarModel1 {
        public ScalarModel1(ScalarModel1Type type) {
            Type = type;
        }
        public double? Number { get; set; } 
        public string? Str { get; set; } 

        public ScalarModel1Type Type { get; set; }


        public static ScalarModel1 CreateNumber(double number) {
            ScalarModel1Type typ = ScalarModel1Type.Number;

            ScalarModel1 res = new ScalarModel1(typ);
            res.Number = number;
            return res;
        }

        public static ScalarModel1 CreateStr(string str) {
            ScalarModel1Type typ = ScalarModel1Type.Str;

            ScalarModel1 res = new ScalarModel1(typ);
            res.Str = str;
            return res;
        }

        public static ScalarModel1 CreateNull() {
            ScalarModel1Type typ = ScalarModel1Type.Null;
            return new ScalarModel1(typ);
        }

        public class ScalarModel1Converter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(ScalarModel1);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                } 
                try {
                    var converted = Convert.ToDouble(json);
                    return new ScalarModel1(ScalarModel1Type.Number) {
                        Number = converted
                    };
                } catch (System.FormatException) {
                    // try next option
                }
                if (json[0] == '"' && json[^1] == '"'){
                    return new ScalarModel1(ScalarModel1Type.Str) {
                        Str = json[1..^1]
                    };
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                ScalarModel1 res = (ScalarModel1)value;
                if (ScalarModel1Type.FromString(res.Type).Equals(ScalarModel1Type.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Number != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Number));
                    return;
                }
                if (res.Str != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Str));
                    return;
                }

            }
        }

    }

}