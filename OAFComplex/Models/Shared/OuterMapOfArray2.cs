
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace OAFComplex.Models.Shared
{
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using OAFComplex.Models.Shared;
    using OAFComplex.Utils;
    using System.Collections.Generic;
    using System.Numerics;
    using System;
    

    public class OuterMapOfArray2Type
    {
        private OuterMapOfArray2Type(string value) { Value = value; }

        public string Value { get; private set; }
        public static OuterMapOfArray2Type MapOfPostman { get { return new OuterMapOfArray2Type("mapOfPostman"); } }
        
        public static OuterMapOfArray2Type MapOfPerson { get { return new OuterMapOfArray2Type("mapOfPerson"); } }
        
        public static OuterMapOfArray2Type MapOfnumber { get { return new OuterMapOfArray2Type("mapOfnumber"); } }
        
        public static OuterMapOfArray2Type Any { get { return new OuterMapOfArray2Type("any"); } }
        
        public static OuterMapOfArray2Type Null { get { return new OuterMapOfArray2Type("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(OuterMapOfArray2Type v) { return v.Value; }
        public static OuterMapOfArray2Type FromString(string v) {
            switch(v) {
                case "mapOfPostman": return MapOfPostman;
                case "mapOfPerson": return MapOfPerson;
                case "mapOfnumber": return MapOfnumber;
                case "any": return Any;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for OuterMapOfArray2Type");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((OuterMapOfArray2Type)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }
    

    [JsonConverter(typeof(OuterMapOfArray2.OuterMapOfArray2Converter))]
    public class OuterMapOfArray2 {
        public OuterMapOfArray2(OuterMapOfArray2Type type) {
            Type = type;
        }
        public Dictionary<string, Postman>? MapOfPostman { get; set; } 
        public Dictionary<string, Person>? MapOfPerson { get; set; } 
        public Dictionary<string, double>? MapOfnumber { get; set; } 
        public object? Any { get; set; } 

        public OuterMapOfArray2Type Type { get; set; }


        public static OuterMapOfArray2 CreateMapOfPostman(Dictionary<string, Postman> mapOfPostman) {
            OuterMapOfArray2Type typ = OuterMapOfArray2Type.MapOfPostman;

            OuterMapOfArray2 res = new OuterMapOfArray2(typ);
            res.MapOfPostman = mapOfPostman;
            return res;
        }

        public static OuterMapOfArray2 CreateMapOfPerson(Dictionary<string, Person> mapOfPerson) {
            OuterMapOfArray2Type typ = OuterMapOfArray2Type.MapOfPerson;

            OuterMapOfArray2 res = new OuterMapOfArray2(typ);
            res.MapOfPerson = mapOfPerson;
            return res;
        }

        public static OuterMapOfArray2 CreateMapOfnumber(Dictionary<string, double> mapOfnumber) {
            OuterMapOfArray2Type typ = OuterMapOfArray2Type.MapOfnumber;

            OuterMapOfArray2 res = new OuterMapOfArray2(typ);
            res.MapOfnumber = mapOfnumber;
            return res;
        }

        public static OuterMapOfArray2 CreateAny(object any) {
            OuterMapOfArray2Type typ = OuterMapOfArray2Type.Any;

            OuterMapOfArray2 res = new OuterMapOfArray2(typ);
            res.Any = any;
            return res;
        }

        public static OuterMapOfArray2 CreateNull() {
            OuterMapOfArray2Type typ = OuterMapOfArray2Type.Null;
            return new OuterMapOfArray2(typ);
        }

        public class OuterMapOfArray2Converter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(OuterMapOfArray2);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            { 
                var json = JRaw.Create(reader).ToString();

                if (json == "null") {
                    return null;
                }
                try
                {
                    Dictionary<string, Postman>? mapOfPostman = JsonConvert.DeserializeObject<Dictionary<string, Postman>>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(Dictionary<string, Postman>))});
                    return new OuterMapOfArray2(OuterMapOfArray2Type.MapOfPostman) {
                        MapOfPostman = mapOfPostman
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    Dictionary<string, Person>? mapOfPerson = JsonConvert.DeserializeObject<Dictionary<string, Person>>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(Dictionary<string, Person>))});
                    return new OuterMapOfArray2(OuterMapOfArray2Type.MapOfPerson) {
                        MapOfPerson = mapOfPerson
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    Dictionary<string, double>? mapOfnumber = JsonConvert.DeserializeObject<Dictionary<string, double>>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(Dictionary<string, double>))});
                    return new OuterMapOfArray2(OuterMapOfArray2Type.MapOfnumber) {
                        MapOfnumber = mapOfnumber
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }
                try
                {
                    object? any = JsonConvert.DeserializeObject<object>(json, new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, MissingMemberHandling = MissingMemberHandling.Error, Converters = Utilities.GetJsonConverters(typeof(object))});
                    return new OuterMapOfArray2(OuterMapOfArray2Type.Any) {
                        Any = any
                    };
                }
                catch (Exception ex)
                {
                    if (!(ex is Newtonsoft.Json.JsonReaderException || ex is Newtonsoft.Json.JsonSerializationException)) {
                        throw ex;
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                OuterMapOfArray2 res = (OuterMapOfArray2)value;
                if (OuterMapOfArray2Type.FromString(res.Type).Equals(OuterMapOfArray2Type.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.MapOfPostman != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.MapOfPostman));
                    return;
                }
                if (res.MapOfPerson != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.MapOfPerson));
                    return;
                }
                if (res.MapOfnumber != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.MapOfnumber));
                    return;
                }
                if (res.Any != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Any));
                    return;
                }

            }
        }

    }

}